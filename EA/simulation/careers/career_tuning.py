from protocolbuffers.DistributorOps_pb2 import Operationimport protocolbuffersfrom audio.primitive import TunablePlayAudiofrom away_actions.away_actions import AwayActionfrom buffs.tunable import TunableBuffReferencefrom caches import cachedfrom careers import career_opsfrom careers.career_enums import CareerCategory, CareerOutfitGenerationType, CareerPanelType, CareerShiftType, get_selector_type_from_career_category, CareerSelectorTypes, CareerEventDeclineOptionsfrom careers.career_location import TunableCareerLocationVariantfrom careers.career_scheduler import TunableCareerScheduleVariant, get_career_schedule_for_levelfrom careers.career_story_progression import CareerStoryProgressionParametersfrom distributor.ops import GenericProtocolBufferOpfrom distributor.system import Distributorfrom event_testing.resolver import SingleSimResolverfrom event_testing.test_events import TestEventfrom event_testing.tests import TunableTestSetfrom filters.tunable import TunableSimFilterfrom interactions import ParticipantTypefrom interactions.utils.adventure import Adventurefrom interactions.utils.loot import LootActionsfrom interactions.utils.success_chance import SuccessChancefrom interactions.utils.tested_variant import TunableTestedVariantfrom objects.mixins import SuperAffordanceProviderMixin, TargetSuperAffordanceProviderMixin, MixerProviderMixin, MixerActorMixinfrom objects.object_creation import ObjectCreationfrom sims.outfits.outfit_generator import TunableOutfitGeneratorReferencefrom sims.sim_info_types import Agefrom sims4.localization import TunableLocalizedStringFactory, TunableLocalizedStringfrom sims4.math import MAX_UINT64from sims4.tuning.geometric import TunableCurvefrom sims4.tuning.instances import HashedTunedInstanceMetaclassfrom sims4.tuning.tunable import TunableTuple, TunableEnumFlags, TunableEnumEntry, OptionalTunable, Tunable, TunableMapping, TunableThreshold, TunableList, TunableReference, TunableRange, HasTunableReference, TunableSimMinute, TunableSet, TunablePercent, HasTunableSingletonFactory, AutoFactoryInit, TunableVariant, TunableRegionDescription, HasTunableFactory, TunablePackSafeReferencefrom sims4.tuning.tunable_base import GroupNames, ExportModesfrom sims4.utils import classpropertyfrom singletons import DEFAULTfrom statistics.commodity import RuntimeCommodity, CommodityTimePassageFixupTypefrom statistics.runtime_statistic import RuntimeStatisticfrom traits.trait_type import TraitTypefrom tunable_multiplier import TunableMultiplier, TestedSumfrom ui.ui_dialog import UiDialogResponse, UiDialogOkCancel, UiDialogOk, UiDialog, PhoneRingTypefrom ui.ui_dialog_generic import UiDialogTextInputOk, UiDialogTextInputOkCancelfrom ui.ui_dialog_notification import UiDialogNotification, TunableUiDialogNotificationSnippetfrom venues.venue_constants import NPCSummoningPurposeimport careers.career_baseimport event_testing.testsimport interactions.utils.interaction_elementsimport schedulerimport servicesimport sims4.localizationimport sims4.resourcesimport sims4.tuning.tunableimport tunable_timeimport ui.screen_slamlogger = sims4.log.Logger('CareerTuning', default_owner='tingyul')
def _get_career_notification_tunable_factory(**kwargs):
    return UiDialogNotification.TunableFactory(locked_args={'text_tokens': DEFAULT, 'icon': None, 'primary_icon_response': UiDialogResponse(text=None, ui_request=UiDialogResponse.UiDialogUiRequest.SHOW_CAREER_PANEL), 'secondary_icon': None}, **kwargs)

class CareerToneTuning(AutoFactoryInit, HasTunableSingletonFactory):
    FACTORY_TUNABLES = {'default_action_list': TunableList(description='\n            List of test to default action. Should any test pass, that will\n            be set as the default action.\n            ', tunable=TunableTuple(default_action_test=OptionalTunable(description='\n                    If enabled, test will be run on the sim. \n                    Otherwise, no test will be run and default_action tuned will\n                    automatically be chosen. There should only be one item, \n                    which is also the default item in the list which has this \n                    disabled.\n                    ', tunable=TunableTestSet(description='\n                        Test to run to figure out what the default away action \n                        should be.\n                        ')), default_action=AwayAction.TunableReference(description='\n                    Default away action tone.\n                    '))), 'optional_actions': TunableSet(description='\n            Additional selectable away action tones.\n            ', tunable=AwayAction.TunableReference(pack_safe=True)), 'leave_work_early': TunableReference(description='\n            Sim Info interaction to end work early.\n            ', manager=services.get_instance_manager(sims4.resources.Types.INTERACTION), class_restrictions='CareerLeaveWorkEarlyInteraction'), 'stay_late': OptionalTunable(description='\n            If enabled, a Sim Info interaction to extend the work session.\n            ', tunable=TunableReference(manager=services.get_instance_manager(sims4.resources.Types.INTERACTION), class_restrictions='CareerStayLateInteraction'))}

    def get_default_action(self, sim_info):
        resolver = SingleSimResolver(sim_info)
        for default_action_info in self.default_action_list:
            default_test = default_action_info.default_action_test
            if not default_test is None:
                if default_test.run_tests(resolver):
                    return default_action_info.default_action
            return default_action_info.default_action
        logger.error('Failed to find default action for career tone tuning.                       Did you forget to add a default action with no test at                       the end of the list?')
